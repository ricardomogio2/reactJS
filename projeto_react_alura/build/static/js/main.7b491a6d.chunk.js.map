{"version":3,"sources":["Header.js","Tabela.js","Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","TableHead","TableBody","props","linhas","autores","map","linha","index","key","nome","livro","preco","onClick","removeAutor","Tabela","this","Component","Formulario","submitForm","escutadorDeSubmit","state","setState","stateInicial","escutadorDeInput","event","target","name","value","htmlFor","id","type","onChange","App","filter","autor","posAtual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b491a6d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = ()=>{\r\n  return(\r\n    <nav>\r\n    <div className=\"nav-wrapper indigo lighten-2b\">\r\n      <a href=\"/\" className=\"brand-logo\">Casa do código</a>\r\n      <ul className=\"right\">\r\n        <li><a href=\"/autores\">Autores</a></li>\r\n        <li><a href=\"/livros\">Livros</a></li>\r\n        <li><a href=\"/sobre\">Sobre</a></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\n\r\nconst TableHead = () => {\r\n  return(\r\n    <thead>\r\n      <tr>\r\n        <th>Autor</th>\r\n        <th>Livro</th>\r\n        <th>Preço</th>\r\n        <th>Remover</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nconst TableBody = props => {\r\n  const linhas = props.autores.map((linha, index)=> {\r\n    return(\r\n      <tr key={index} >\r\n        <td>{linha.nome}</td>\r\n        <td>{linha.livro}</td>\r\n        <td>{linha.preco}</td>\r\n        <td><button \r\n              onClick={() => props.removeAutor(index)} \r\n              className='waves-effect waves-light btn indigo lighten-2b'>x</button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return(\r\n    <tbody>\r\n      {linhas}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nclass Tabela extends Component{\r\n  render(){\r\n      const { autores, removeAutor } = this.props\r\n\r\n    return(\r\n      <table className='certered highlight'>\r\n        <TableHead/>\r\n        <TableBody autores = {autores} removeAutor = {removeAutor} />\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Tabela","import React, { Component } from 'react'\r\n\r\nclass Formulario extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.stateInicial = {\r\n      nome:'',\r\n      livro:'',\r\n      preco:''\r\n    }\r\n    this.state = this.stateInicial\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.escutadorDeSubmit(this.state)\r\n    this.setState(this.stateInicial)\r\n  }\r\n\r\n  escutadorDeInput = event => {\r\n    const {name, value} = event.target\r\n\r\n    this.setState({\r\n      [name] : value\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const {nome, livro, preco} = this.state\r\n\r\n    return(\r\n      <form>\r\n        <div className='row'>\r\n          <div className='input-field col s4'>\r\n            <label className='input-field' htmlFor=\"nome\">Nome</label>\r\n            <input \r\n              className= 'validate'\r\n              id='nome'\r\n              type=\"text\"\r\n              name='nome'\r\n              value={nome}\r\n              onChange={this.escutadorDeInput} />\r\n          </div>\r\n\r\n          <div className=\"input-field col s4\">\r\n            <label className='input-field' htmlFor=\"livro\">Livro</label>\r\n            <input \r\n              id='livro'\r\n              type=\"text\"\r\n              name='livro'\r\n              value={livro}\r\n              onChange={this.escutadorDeInput} />\r\n          </div>\r\n\r\n          <div className=\"input-field col s4\">\r\n            <label className='input-field' htmlFor=\"preco\">Preco</label>\r\n            <input \r\n              id='preco'\r\n              type=\"text\"\r\n              name='preco'\r\n              value={preco}\r\n              onChange={this.escutadorDeInput} />            \r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          className='waves-effect waves-light btn indigo lighten-2b' \r\n          onClick={this.submitForm} \r\n          type='button'>Salvar</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Formulario","import React, { Component, Fragment } from 'react';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './App.css'\nimport Header from './Header'\nimport Tabela from './Tabela'\nimport Form from './Formulario'\n\n\nclass App extends Component {\n  state = {\n    autores : [\n      {\n        nome: 'Ricardo',\n        livro: 'Sei la',\n        preco: '1'\n      },\n  \n      {\n        nome: 'Gabi',\n        livro: 'Sei la2',\n        preco: '2'\n      },\n  \n      {\n        nome: 'Amy',\n        livro: 'Roubando',\n        preco: '3'\n      },\n  \n      {\n        nome: 'Luna',\n        livro: 'Petisco',\n        preco: '4'\n      }\n    ],\n  }\n\n  removeAutor = index =>{\n    const {autores} = this.state\n\n    this.setState({\n      autores: autores.filter((autor, posAtual) => {\n        return posAtual !== index\n      })\n    })\n  }\n\n  escutadorDeSubmit = autor => {\n    this.setState({ autores : [...this.state.autores, autor] })\n  }\n\n  render(){\n    return (\n      <Fragment>\n          <Header />\n        <div className='container mb-10'>\n          <Tabela autores = {this.state.autores} removeAutor = {this.removeAutor} />\n          <Form escutadorDeSubmit = {this.escutadorDeSubmit} />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}